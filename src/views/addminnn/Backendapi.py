from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer
from fastapi.middleware.cors import CORSMiddleware
from pymongo import MongoClient
from datetime import datetime, timedelta
import os
import jwt
from passlib.context import CryptContext
from pydantic import BaseModel
from dotenv import load_dotenv
import uvicorn

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ .env
load_dotenv()
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017/")
SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key-here")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ .env

print(f"üîë Using MONGO_URI: {MONGO_URI}")
print(f"üîí SECRET_KEY is set: {bool(SECRET_KEY)}")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    client.admin.command('ping')
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Database ‡πÅ‡∏•‡∏∞ Collection
    db = client["air_quality"]
    pm25_collection = db["pm25_data"]
    admin_collection = db["admins"]
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB: {e}")
    raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI
app = FastAPI()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‡πÉ‡∏ä‡πâ bcrypt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ‡πÉ‡∏ä‡πâ OAuth2PasswordBearer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="admin/login")

# Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5
class PM25Data(BaseModel):
    value: float
    location: str                                                      

class AdminRegister(BaseModel):
    username: str
    password: str

class AdminLogin(BaseModel):
    username: str
    password: str

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
def hash_password(password: str):
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str):
    return pwd_context.verify(plain_password, hashed_password)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token (‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
def create_token(username: str):
    expiration = datetime.utcnow() + timedelta(hours=2)
    payload = {"username": username, "exp": expiration}
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
def verify_token(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

# ‚úÖ API - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
@app.post("/admin/register")
async def register_admin(data: AdminRegister):
    try:
        print(f"üìù Registering new admin with username: {data.username}")
        
        if not data.username or not data.password:
            raise HTTPException(status_code=400, detail="Username and password are required")
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_admin = admin_collection.find_one({"username": data.username})
        if existing_admin:
            print(f"‚ùå Username {data.username} already exists")
            raise HTTPException(status_code=400, detail="Username already exists")

        # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        hashed_password = hash_password(data.password)
        print("‚úÖ Password hashed successfully")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô MongoDB
        new_admin = {
            "username": data.username,
            "password": hashed_password,
            "created_at": datetime.utcnow()
        }
        
        result = admin_collection.insert_one(new_admin)
        print(f"‚úÖ Admin registered with id: {result.inserted_id}")
        
        return {
            "status": "success",
            "message": "Admin registered successfully",
            "username": data.username
        }
        
    except HTTPException as he:
        print(f"‚ùå HTTP Exception: {str(he.detail)}")
        raise he
    except Exception as e:
        error_msg = f"Error registering admin: {str(e)}"
        print(f"‚ùå {error_msg}")
        raise HTTPException(status_code=500, detail=error_msg)

# ‚úÖ API - ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
@app.post("/admin/login")
def admin_login(data: AdminLogin):
    print(f"üëâ Login attempt with username: {data.username}")  # Debug log
    print(f"üëâ Received password: {data.password}")  # Debug log
    
    admin = admin_collection.find_one({"username": data.username})
    print(f"üëâ Found admin in database: {admin}")  # Debug log - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    if not admin:
        print("‚ùå Admin not found in database")  # Debug log
        raise HTTPException(status_code=401, detail="Invalid credentials")
        
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    is_valid = verify_password(data.password, admin["password"])
    print(f"üëâ Password verification result: {is_valid}")  # Debug log
        
    if not is_valid:
        print("‚ùå Password verification failed")  # Debug log
        raise HTTPException(status_code=401, detail="Invalid credentials")

    print("‚úÖ Login successful")  # Debug log
    token = create_token(data.username)
    return {"token": token}

# ‚úÖ API - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ PM2.5 (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Token)
@app.post("/admin/pm25")
def add_pm25(data: PM25Data, token: str = Depends(verify_token)):
    pm25_collection.insert_one({
        "value": data.value,
        "location": data.location,
        "timestamp": datetime.utcnow()
    })
    return {"message": "PM2.5 value added"}

# ‚úÖ API - ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5
@app.get("/pm25")
def get_pm25():
    data = list(pm25_collection.find({}, {"_id": 0}))
    return data

# ‚úÖ API - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development)
@app.get("/admin/list")
def list_admins():
    admins = list(admin_collection.find({}, {"_id": 0}))
    return {"admins": admins, "count": len(admins)}

# ‚úÖ API - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development)
@app.get("/admin/check")
def check_admin():
    admins = list(admin_collection.find({}, {"_id": 0, "password": 0}))
    return {"admins": admins}

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ MongoDB
@app.get("/mongodb-status")
def check_mongodb_status():
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        client.admin.command("ping")
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        admin_count = admin_collection.count_documents({})
        return {
            "status": "Connected",
            "database": "air_quality",
            "admin_count": admin_count
        }
    except Exception as e:
        return {"status": "Error", "message": str(e)}

def test_mongodb_connection():
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
        client = MongoClient('mongodb://localhost:27017/')
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        client.server_info()
        print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")

if __name__ == "__main__":
    uvicorn.run("src.views.addminnn.Backendapi:app", host="0.0.0.0", port=8000, reload=True)
