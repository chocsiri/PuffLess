import requests
import json
import schedule
import time
from datetime import datetime, timedelta
from pymongo import MongoClient
import pytz

# ------------------------ üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ------------------------
MONGO_URI = "mongodb+srv://66022613:computer88@cluster0.u5726.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0"

try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    client.admin.command("ping")
    print("‚úÖ Connected to MongoDB!")
except Exception as e:
    print(f"‚ùå Error connecting to MongoDB: {e}")
    exit()  # ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

db = client.Pm25
collection = db.pm_data


# ------------------------ üåé ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡πÅ‡∏•‡∏∞ Timezone ------------------------
API_KEY = "a1bfffc563959672387f02e517ea1a60"
LAT, LON = 19.0292, 99.8976
TIMEZONE = pytz.timezone("Asia/Bangkok")


# ------------------------ üì° ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏à‡∏≤‡∏Å API ------------------------
def fetch_pm25_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏à‡∏≤‡∏Å OpenWeather API ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB"""
    now = datetime.now(TIMEZONE)
    end = int(now.timestamp())
    start = int((now - timedelta(hours=5)).timestamp())

    url = f"https://api.openweathermap.org/data/2.5/air_pollution/history?lat={LAT}&lon={LON}&start={start}&end={end}&appid={API_KEY}"

    try:
        response = requests.get(url, timeout=10)  # ‡∏ï‡∏±‡πâ‡∏á timeout ‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
        response.raise_for_status()  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Error (‡πÄ‡∏ä‡πà‡∏ô 404, 500) ‡πÉ‡∏´‡πâ raise Exception ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        data = response.json()

        if "list" in data and data["list"]:
            pm25 = data["list"][-1]["components"]["pm2_5"]
            last_updated = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC

            pm25_hourly = []
            for entry in data["list"]:
                entry_time = datetime.utcfromtimestamp(entry["dt"]).replace(tzinfo=pytz.utc)
                time_entry = entry_time.astimezone(TIMEZONE).strftime("%H:00")  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
                pm25_hourly.append({"time": time_entry, "value": entry["components"]["pm2_5"]})

            print(f"\nüåø Latest PM2.5 value: {pm25} ¬µg/m¬≥")
            print(f"üïí Last updated: {last_updated}")
            print("üìä Hourly PM2.5 data:")
            for entry in pm25_hourly:
                print(f"   ‚è∞ {entry['time']} - {entry['value']} ¬µg/m¬≥")

            save_pm25_data(pm25, last_updated, pm25_hourly)
        else:
            print("‚ö†Ô∏è No valid PM2.5 data found!")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching data: {e}")


# ------------------------ üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MongoDB ------------------------
def save_pm25_data(pm25, last_updated, pm25_hourly):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏•‡∏á MongoDB"""
    data = {
        "pm25": pm25,
        "lastUpdatedTime": last_updated,
        "pm25Hourly": pm25_hourly,
    }

    try:
        collection.insert_one(data)
        print("‚úÖ Data saved to MongoDB!")
    except Exception as e:
        print(f"‚ùå Error saving data: {e}")


# ------------------------ ‚è≥ ‡∏ï‡∏±‡πâ‡∏á Scheduler ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ------------------------
def start_auto_update():
    schedule.every().hour.at(":00").do(fetch_pm25_data)  # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏£‡∏á (:00)

    print("\nüîÑ Scheduler started! Fetching PM2.5 data every hour...")
    while True:
        schedule.run_pending()
        time.sleep(60)  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ


# ------------------------ üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ------------------------
if __name__ == "__main__":
    fetch_pm25_data()  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Scheduler
    start_auto_update()
